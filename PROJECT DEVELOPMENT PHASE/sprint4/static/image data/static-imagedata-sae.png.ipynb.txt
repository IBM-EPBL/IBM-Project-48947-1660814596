*/token.json
*/credentials.json
from flask import Flask, app, request, render_template
import base64
import datetime
import os
import flask
import re
import flask_login
import base64
from PIL import Image
from io import BytesIO
import datetime

import cv2
import flask
import flask_login
import numpy as np
from tensorflow.keras.models import load_model

from cryptography.fernet import Fernet 
key = Fernet.generate_key()
f= Fernet(key)
from datetime import datetime

from cloudant.client import Cloudant
from cloudant.error import CloudantException
from cloudant.result import Result, ResultByKey


#os.chdir('Project Development Phase\Sprint-3')
model1 = load_model('Model/level.h5')
model2 = load_model('Model/body.h5')
from flask import Flask, app, render_template, request
from PIL import Image


def detect(frame,model1,f):
@@ -48,7 +49,7 @@ def detect(frame,model1,f):

def image_database_updation(name,email,imagestr):
    global user_image_database
    now = datetime.datetime.now()
    now = datetime.now()
    json_image_document={
        'name':name,
        'email':email,
@@ -69,8 +70,8 @@ def image_database_retrieval():
    for i in image_result_retrieved:
        if(i['doc']['email'] in image_result.keys()):
            # like current date> rx date('str')
            n = datetime.datetime.strptime(i['doc']['datetime'],'%m/%d/%Y, %H:%M:%S')  
            o = datetime.datetime.strptime(image_result[i['doc']['email']]['date'],'%m/%d/%Y, %H:%M:%S')  
            n = datetime.strptime(i['doc']['datetime'],'%m/%d/%Y, %H:%M:%S')  
            o = datetime.strptime(image_result[i['doc']['email']]['date'],'%m/%d/%Y, %H:%M:%S')  
            if(n>o):

                image_result[i['doc']['email']] = {'name':i['doc']['name'],'image':i['doc']['image'],'date':i['doc']['datetime']}
@@ -81,6 +82,7 @@ def image_database_retrieval():
def database_updation(name,email,password):
    global user_database
    jsonDocument = {
	'_id':email.replace('@','').replace('.',''),
        'name':name,
        'email':email,
        'password':password
@@ -142,12 +144,14 @@ def index():
    else:
        return flask.redirect(flask.url_for('login'))

from quickstart import send_mail
@app.route('/register',methods = ['GET','POST'])
def register():
    data = database_retrieval()
    if(flask.request.method == 'GET'):
        return render_template('register.html')
    email = flask.request.form['email']

    if(email in data):
        return render_template('register.html',flash_message='True')
    else:
@@ -157,6 +161,7 @@ def register():
        user.id = email
        user.name = flask.request.form['name']
        flask_login.login_user(user)
        send_mail(email,"Thanks for registering","thank you")
        return render_template('dashboard.html',flash_message='True')


@@ -198,10 +203,81 @@ def logout():
    flask_login.logout_user()
    return render_template('logout.html')

@app.route('/forgotpassword',methods=['GET','POST'])
def forgotpassword():
    data = database_retrieval()

    #flask.flash('23232','info')
    #flask_login.logout_user()

    if(flask.request.method=='POST'):
        reset_email = flask.request.form['email']
        #print(reset_email)
        print(data)
        if(reset_email in data.keys()):
            #user = User()
            #user.id=reset_email
            #token = user.token_gen()
            current_time = datetime.now()
            d = f'{reset_email},{current_time.year},{current_time.month},{current_time.day},{current_time.hour},{current_time.month},{current_time.second},{current_time.microsecond}'
            token = f.encrypt(bytes(d,'utf-8'))
            #k.append(token)
            #print(token)
            send_mail(reset_email,"password reset",f"Reset password URL is {flask.url_for('resetpassword',token=token, _external=True)}")
        else:
            print('#########################')
            pass

    return render_template('forgotpassword.html')

b,token1=False,'a'
@app.route('/resetpassword/<token>', methods=["GET", "POST"])
def resetpassword(token):
    global b,token1
    import copy
    if flask.request.method=="GET":
        token1 = copy.copy(token)
        #print("^^^^^^^^^^^^^^^^^^^^^^^")
        #print(token1)

        token1 = f.decrypt(bytes(token1,'utf-8')).decode('utf-8')
        token1 = token1.split(',')
        print(token1)
        generated_date = datetime(int(token1[1]),int(token1[2]),int(token1[3]),int(token1[4]),int(token1[5]),int(token1[6]),int(token1[7]))
        print(generated_date)
        if((datetime.now()-generated_date).total_seconds()<30*60):
            b=True

    data = database_retrieval()

    if flask.request.method=="POST" and b:

        #token_email = user.verify_token(token)
        print(token1)
        print(data[token1[0]])
        print('password resetted 33333333333333333333333333333333333333333333333333333333333333333333333')
        #data[token1[0]]['password']=flask.request.form['password']
        doc = user_database[token1[0].replace('@','').replace('.','')]
        doc['password']=flask.request.form['password']
        doc.save()

        #user_database.save()

        return flask.redirect(flask.url_for('login'))
    return render_template('resetpassword.html')




@app.route('/prediction',methods = ['GET','POST'])
@flask_login.login_required
def prediction():
    from tensorflow.keras.models import load_model

    #os.chdir('Project Development Phase\Sprint-3')
    model1 = load_model('Model/level.h5')
    model2 = load_model('Model/body.h5')

    if(flask.request.method=='POST'):
        img = flask.request.files['myFile']
        try:
@@ -213,9 +289,14 @@ def prediction():
        data = image_database_retrieval()
        print(flask_login.current_user.id)
        #print(len(base64.b64decode(data[flask_login.current_user.id]['image'].strip())))
        img_retrived = np.asarray(bytearray(base64.b64decode(data[flask_login.current_user.id]['image'])))
        print(img_retrived.shape)
        print()
        image = Image.open(BytesIO(base64.b64decode(data[flask_login.current_user.id]['image'])))
        img_retrived = np.array(image)
        '''img_retrived = np.asarray(base64.b64decode(data[flask_login.current_user.id]['image']))
        print(data[flask_login.current_user.id]['image'])
        print(img_retrived.shape)'''
        #img_retrived = np.resize(img_retrived,(244,244))
        img_retrive = Image.fromarray(img_retrived)
        img_retrive.save('static\imagedata\sae.png')
        '''img_retrived = np.frombuffer(
            BytesIO(
                base64.b64decode(data[flask_login.current_user.id]['image'])
@@ -250,7 +331,7 @@ def prediction():
        img_retrived = Image.fromarray(img_retrived)
        img_retrived.save('static\imagedata\save.png')
        print('image uploaded and retrieved')
        return render_template('prediction.html',flash_message='True')
        return render_template('prediction.html',flash_message='True',value = result1+' '+result2+' '+value)
        #,imag=img_retrived)

    return render_template('prediction.html',flash_message='Flase')
 116  
Final Deliverable/quickstart.py
@@ -0,0 +1,116 @@
from __future__ import print_function

import os.path

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

from googleapiclient.discovery import build
from google.oauth2.credentials import Credentials
import base64

from email import encoders
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
import mimetypes

import os
def verification():
# If modifying these scopes, delete the file token.json.
    SCOPES = ['https://mail.google.com/']


    def main():
        """Shows basic usage of the Gmail API.
        Lists the user's Gmail labels.
        """
        creds = None
        # The file token.json stores the user's access and refresh tokens, and is
        # created automatically when the authorization flow completes for the first
        # time.
        if os.path.exists('token.json'):
            creds = Credentials.from_authorized_user_file('token.json', SCOPES)
        # If there are no (valid) credentials available, let the user log in.
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(
                    'credentials.json', SCOPES)
                creds = flow.run_local_server(port=0)
            # Save the credentials for the next run
            with open('token.json', 'w') as token:
                token.write(creds.to_json())

        try:
            # Call the Gmail API
            service = build('gmail', 'v1', credentials=creds)
            results = service.users().labels().list(userId='me').execute()
            labels = results.get('labels', [])

            if not labels:
                print('No labels found.')
                return
            print('Labels:')
            for label in labels:
                print(label['name'])

        except HttpError as error:
            # TODO(developer) - Handle errors from gmail API.
            print(f'An error occurred: {error}')



    main()
if(not 'token.json' in os.listdir('.')):
    verification()
print('user verified. token is existing ')
def send_mail(to, subject, body, format='plain', attachments=[]):
    creds = None
    SCOPES = ['https://mail.google.com/']
    print(os.getcwd())
    creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    service = build('gmail', 'v1', credentials=creds)

    file_attachments = attachments

    #html = ''
    #with open('message.html') as msg:
    #    html += msg.read()

    #create email
    mimeMessage = MIMEMultipart()
    mimeMessage['to'] = to
    mimeMessage['subject'] = subject
    #mimeMessage.attach(MIMEText(html,'html'))
    mimeMessage.attach(MIMEText(body, format))

    for attachment in file_attachments:
        content_type, encoding = mimetypes.guess_type(attachment)
        main_type, sub_type = content_type.split('/', 1)
        file_name = os.path.basename(attachment)

        with open(attachment, 'rb') as f:
            myFile = MIMEBase(main_type, sub_type)
            myFile.set_payload(f.read())
            myFile.add_header('Content-Disposition', attachment, filename=file_name)
            encoders.encode_base64(myFile)

        mimeMessage.attach(myFile)


    raw_string = base64.urlsafe_b64encode(mimeMessage.as_bytes()).decode()


    message = service.users().messages().send(
        userId='me',
        body={'raw': raw_string}).execute()

   return message


#send_mail('','hi kk','it\'s nice meeting you :)')
 9  
Final Deliverable/requirements.txt
@@ -1,2 +1,7 @@
pip install Flask
pip install flask_login
flask_login
numpy
opencv-python
tensorflow
cloudant
pillow
flask_login